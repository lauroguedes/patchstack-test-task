<?php

use App\Models\Vulnerability;
use Illuminate\Testing\Fluent\AssertableJson;

test('should get all the vulnerabilities', function () {
    Vulnerability::factory(10)->create();

    $this->getJson(getApiPath())
        ->assertOk()
        ->assertJson(fn (AssertableJson $json) => $json
            ->has('data', 10)
        );
});

test('should get only one vulnerability', function () {
    $vulnerability = Vulnerability::factory()->create();

    $this->getJson(getApiPath() . "/{$vulnerability->id}")
        ->assertOk()
        ->assertJson([
            'data' => [
                'id' => $vulnerability->id,
            ]
        ]);
});

test('should create a new vulnerability', function () {
    $expectedData = [
        'title' => fake()->title,
        'description' => fake()->paragraph,
        'url' => fake()->url,
        'year' => fake()->year
    ];

    $response = $this->postJson(getApiPath(), $expectedData)
        ->assertStatus(201)
        ->assertJson([
            'data' => $expectedData
        ]);

    $this->assertDatabaseHas('vulnerabilities', [
        'id' => $response->json('data')['id']
    ]);
});

test('should update a vulnerability', function () {
    $vulnerability = Vulnerability::factory()->create();

    $response = $this->getJson(getApiPath() . "/{$vulnerability->id}");
    $dataUpdated = $response->json('data');
    $dataUpdated['title'] = 'Title Updated';

    $this->putJson(getApiPath() . "/{$vulnerability->id}", $dataUpdated)
        ->assertOk()
        ->assertJson([
            'data' => $dataUpdated
        ]);

    $this->assertDataBaseHas('vulnerabilities', [
        'id' => $dataUpdated['id'],
        'title' => $dataUpdated['title']
    ]);
});

test('should delete a vulnerability', function () {
    $vulnerability = Vulnerability::factory()->create();

    $this->deleteJson(getApiPath() . "/{$vulnerability->id}")
        ->assertNoContent();

    $this->assertDataBaseMissing('vulnerabilities', [
        'id' => $vulnerability->id,
    ]);
});

test('should not create because validation failed', function () {
    $expectedData = [
        'description' => fake()->paragraph,
        'url' => fake()->url,
        'year' => fake()->year
    ];

    $this->postJson(getApiPath(), $expectedData)
        ->assertInvalid(['title']);
});

test('should not update because validation failed', function () {
    $vulnerability = Vulnerability::factory()->create();

    $this->putJson(getApiPath() . "/{$vulnerability->id}", [
        'title' => 'Vulnerability test'
    ])->assertInvalid(['description', 'url', 'year']);
});

test('should not get only vulnerability because not found', function () {
    $this->getJson(getApiPath() . '/100')
        ->assertNotFound()
        ->assertExactJson([
            'error' => 'Resource not found'
        ]);
});
